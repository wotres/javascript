MVC 패턴은 모든 요청이 클라이언트에서 서버로 향하는 정보 흐름의 시작을 담당하고, 반대로 데이터베이스는 서버에서 클라이언트로 향하는 데이터 흐름의 사작을 담당
-> 이 과정에서 시간이 많이 소요되고, 자원이 집약적이며 반응형 사용자 경험을 제공하지 못함
-> 비동기식 웹 요청으로 해결하여왔지만 부족
-> 뷰의 일부분만 업데이트하여 더 빠르게 반응, but 중복이 많았음
-> MVVM 패턴 탄생
뷰모델 도입과 데이터 바인딩을 통해 MVC와 차이가 있음
-> 그 결과 전체 설계를 넘나들며 수많은 코드 중복을 줄임 -> 빠른 상호작용
사용자 반응에 즉각 응답,
뷰모델에서 데이터가 변하면 데이터에 연결된 뷰는 자동으로 업데이트, 
데이터 바인더를 데이터에 노출시키고 데이터가 변할 떄마다 뷰에 반영

###############################################################
Vue 생명주기
인스턴스생성 -> 템플릿과 가상 DOM 생성 -> 이벤트 루프 -> 인스턴스 소멸

###############################################################
filter 가 있는 바인딩은 {{ property | filter }} 의 일반형식

###############################################################
기타 문법
Vue CDN : Content delivery network : 지리적, 물리적으로 떨어져 있는 사용자에게 컨텐츠 제공자의 컨텐츠를 더 빠르게 제공할수 있는 기술
crossorigin : 보안때문에 추가 
            동일 출처정책(Same-origin-policy)와 반대되는 개념으로 프로토컬, 도메인, 포트가 달라도 리소스 공유 가능 ex) api 호출
###############################################################